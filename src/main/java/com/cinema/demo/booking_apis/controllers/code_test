        // let selectedSeats = [];  // Lưu danh sách ghế đã chọn
        // let totalAmount = 0;  // Tổng số tiền cho các ghế đã chọn
        //
        // function selectSeat(event) {
        //     let seatElement = event.target.closest('.single-seat');  // Lấy phần tử ghế đã click
        //     if (!seatElement) return;  // Nếu không phải phần tử ghế, thoát
        //
        //     let seatId = seatElement.getAttribute('data-seat-id');
        //     let seatPosition = seatElement.getAttribute('data-seat-position');
        //     let seatPrice = parseFloat(seatElement.getAttribute('data-seat-price'));
        //     let isOccupied = seatElement.getAttribute('data-seat-occupied') === "1";  // Kiểm tra nếu ghế đã được đặt
        //
        //     // Nếu ghế đã được đặt (isOccupied == 1), không thay đổi trạng thái
        //     if (isOccupied) {
        //         return;  // Không làm gì nếu ghế đã đặt
        //     }
        //
        //     // Nếu ghế chưa được chọn, đánh dấu ghế là đã chọn (chuyển sang booked)
        //     if (!selectedSeats.includes(seatPosition)) {
        //         selectedSeats.push(seatPosition);  // Thêm ghế vào danh sách đã chọn
        //         totalAmount += seatPrice;  // Cộng giá ghế vào tổng tiền
        //         seatElement.querySelector('img').setAttribute('src', './assets/images/movie/seat01-booked.png');  // Đánh dấu ghế là booked
        //         seatElement.setAttribute('data-seat-occupied', '1');  // Cập nhật trạng thái ghế thành đã đặt
        //     } else {
        //         // Nếu ghế đã được chọn, bỏ chọn ghế và giảm tổng tiền
        //         selectedSeats = selectedSeats.filter(position => position !== seatPosition);
        //         totalAmount -= seatPrice;
        //         seatElement.querySelector('img').setAttribute('src', './assets/images/movie/seat01-free.png');  // Đánh dấu ghế là free
        //         seatElement.setAttribute('data-seat-occupied', '0');  // Cập nhật trạng thái ghế thành chưa đặt
        //     }
        //
        //     // Cập nhật giao diện hiển thị danh sách ghế đã chọn
        //     document.getElementById('selected-seats').textContent = selectedSeats.join(', ') || 'No seat selected';
        //
        //     // Cập nhật giao diện hiển thị tổng tiền
        //     document.getElementById('total-price').textContent = `$${totalAmount.toFixed(2)}`;
        // }
        //
        // // Gán sự kiện cho các ghế khi trang được tải
        // document.addEventListener('DOMContentLoaded', function () {
        //     const seatElements = document.querySelectorAll('.single-seat');
        //     seatElements.forEach(seatElement => {
        //         seatElement.addEventListener('click', selectSeat);  // Thêm sự kiện click cho mỗi ghế
        //     });
        // });

            <script>
                // Sự kiện khi người dùng click vào ghế
                // let selectedSeats = [];
                // let totalAmount = 0;
                //
                // function selectSeat(event) {
                //     let seatElement = event.target.closest('.single-seat');  // Lấy phần tử ghế đã chọn
                //     let seatId = seatElement.getAttribute('data-seat-id');
                //     let seatPosition = seatElement.getAttribute('data-seat-position');
                //     let seatPrice = parseFloat(seatElement.getAttribute('data-seat-price'));
                //
                //     // Kiểm tra nếu ghế chưa được chọn
                //     if (!selectedSeats.includes(seatId)) {
                //         selectedSeats.push(seatId);
                //         totalAmount += seatPrice;
                //     } else {
                //         // Nếu ghế đã được chọn, bỏ chọn ghế đó và giảm tổng tiền
                //         selectedSeats = selectedSeats.filter(id => id !== seatId);
                //         totalAmount -= seatPrice;
                //     }
                //
                //     // Cập nhật giao diện
                //     document.getElementById('selected-seats').textContent = selectedSeats.join(', ') || 'No seat selected';
                //     document.getElementById('total-price').textContent = `$${totalAmount.toFixed(2)}`;
                // }
                // Sự kiện khi người dùng click vào ghế
                // let selectedSeats = [];
                // let totalAmount = 0;
                //
                // function selectSeat(event) {
                //     let seatElement = event.target.closest('.single-seat');  // Lấy phần tử 'li' chứa ghế
                //     if (!seatElement) return;  // Nếu không phải phần tử ghế, thoát
                //
                //     let seatId = seatElement.getAttribute('data-seat-id');
                //     let seatPosition = seatElement.getAttribute('data-seat-position');
                //     let seatPrice = parseFloat(seatElement.getAttribute('data-seat-price'));
                //     let seatOccupied = seatElement.querySelector('img').getAttribute('src') === './assets/images/movie/seat01-booked.png';  // Kiểm tra nếu ghế đã được đặt
                //
                //     // Nếu ghế đã được đặt, không cho phép thay đổi trạng thái và không thực hiện thêm hoặc bỏ chọn ghế
                //     if (seatOccupied) {
                //         return; // Dừng lại, không làm gì nếu ghế đã được đặt
                //     }
                //
                //     // Kiểm tra nếu ghế chưa được chọn
                //     if (!selectedSeats.includes(seatPosition)) {
                //         selectedSeats.push(seatPosition);  // Thêm seatPosition vào danh sách đã chọn
                //         totalAmount += seatPrice;  // Cộng giá ghế vào tổng tiền
                //         seatElement.querySelector('img').setAttribute('src', './assets/images/movie/seat01-booked.png');  // Đánh dấu ghế là booked
                //     } else {
                //         // Nếu ghế đã được chọn, bỏ chọn ghế đó và giảm tổng tiền
                //         selectedSeats = selectedSeats.filter(position => position !== seatPosition);
                //         totalAmount -= seatPrice;
                //         seatElement.querySelector('img').setAttribute('src', './assets/images/movie/seat01-free.png');  // Đánh dấu ghế là free
                //     }
                //
                //     // Cập nhật giao diện hiển thị danh sách ghế đã chọn
                //     document.getElementById('selected-seats').textContent = selectedSeats.join(', ') || 'No seat selected';
                //
                //     // Cập nhật giao diện hiển thị tổng tiền
                //     document.getElementById('total-price').textContent = `$${totalAmount.toFixed(2)}`;
                // }
                //
                // // Gán sự kiện cho các ghế khi trang được tải
                // document.addEventListener('DOMContentLoaded', function () {
                //     const seatElements = document.querySelectorAll('.single-seat');
                //     seatElements.forEach(seatElement => {
                //         seatElement.addEventListener('click', selectSeat);  // Thêm sự kiện click cho mỗi ghế
                //     });
                // });
            </script>

            @PostMapping("/book-ticket")
            public String bookTicket(@RequestParam List<Integer> seatIds, // Danh sách ghế đã chọn
                                     @RequestParam Integer movieId,
                                     @RequestParam Integer showtimeId,
                                     @RequestParam BigDecimal bookingFee,
                                     HttpServletRequest request,
                                     Model model) {

                List<SeatDTO> selectedSeats = new ArrayList<>();
                BigDecimal totalAmount = BigDecimal.ZERO;

                // Lấy thông tin ghế từ DB dựa trên seatId
                for (Integer seatId : seatIds) {
                    SeatDTO seat = seatService.getSeatById(seatId);
                    if (seat == null) {
                        model.addAttribute("error", "Seat not found");
                        return "boleto/demo/404";
                    }

                    // Cập nhật trạng thái ghế là "đã đặt"
                    seat.setIsOccupied(2);  // Đánh dấu ghế đã được đặt
                    seatService.updateSeatStatus(seat);  // Cập nhật trạng thái ghế trong DB

                    // Lấy giá ghế từ DB theo loại ghế (Silver, Gold, Platinum)
                    BigDecimal seatPrice = seatService.getPriceBySeatType(seat.getSeatType().getSeatName());
                    totalAmount = totalAmount.add(seatPrice);  // Cộng dồn giá của ghế vào tổng tiền

                    selectedSeats.add(seat);
                }

                // Tạo BookingDTO
                BookingDTO booking = new BookingDTO();
                booking.setTotalFoodTicketAmount(totalAmount);
                booking.setBookingFee(bookingFee);
                booking.setStatus("Pending");
                booking.setCreatedDateTime(LocalDateTime.now());  // Sử dụng LocalDateTime để ghi lại thời gian tạo booking

                // Liên kết Booking với Seat
                SeatBookingDTO seatBooking = new SeatBookingDTO();
                seatBooking.setBooking(booking);
                seatBookingService.saveSeatBooking(seatBooking); // Lưu SeatBooking vào DB

                // Lấy thông tin suất chiếu từ showtimeId
                ShowtimeDTO showtime = showtimeService.getShowtimeById(showtimeId);

                // Tạo vé (TicketDTO)
                TicketDTO ticket = new TicketDTO();
                ticket.setSeat(seatService.getSeatById(seatIds.get(0)));  // Chọn ghế đầu tiên làm đại diện
                ticket.setShowtime(showtime);
                ticket.setPrice(totalAmount);
                ticket.setStatus("Not Used");

                // Lưu vé vào DB
                ticketService.saveTicket(ticket);

                // Trả về thông tin vé và ghế đã chọn vào model
                model.addAttribute("ticket", ticket);
                model.addAttribute("selectedSeats", selectedSeats);
                model.addAttribute("totalAmount", totalAmount);

                return "boleto/demo/movie-checkout";  // Trả về trang thanh toán
            }


            <!--                                        <li th:each="seat : ${row.value}" class="single-seat seat-free" th:classappend="${seatTypes[row.key]}">-->
            <!--&lt;!&ndash;                                            <img th:src="@{assets/images/movie/seat01-${seat.isOccupied == 1 ? 'booked' : 'free'}.png}" alt="seat">&ndash;&gt;-->
            <!--                                            &lt;!&ndash; If isOccupied is 1, set the src to booked image &ndash;&gt;-->
            <!--                                            <img th:if="${seat.isOccupied == 1}" th:src="@{assets/images/movie/seat01-booked.png}" alt="seat">-->

            <!--                                            &lt;!&ndash; If isOccupied is 0, set the src to free image &ndash;&gt;-->
            <!--                                            <img th:if="${seat.isOccupied == 0}" th:src="@{assets/images/movie/seat01-free.png}" alt="seat">-->

            <!--                                            <span class="sit-num" th:text="${seat.seatPosition}" th:data-seat-id="${seat.seatId}" th:data-seat-type="${seat.seatType.seatName}"></span>-->
            <!--&lt;!&ndash;                                            <input type="hidden" th:text="${seat.seatId}">&ndash;&gt;-->
            <!--                                        </li>-->



            @PostMapping("/book-ticket")
                public String bookTicket(@RequestParam List<Integer> seatIds, // Danh sách ghế đã chọn
                                         @RequestParam Integer movieId,
                                         @RequestParam Integer showtimeId,
                                         @RequestParam BigDecimal bookingFee,
                                         HttpServletRequest request,
                                         Model model) {

                    List<SeatDTO> selectedSeats = new ArrayList<>();
                    BigDecimal totalAmount = BigDecimal.ZERO;

                    // Lấy thông tin ghế từ DB dựa trên seatId
                    for (Integer seatId : seatIds) {
                        SeatDTO seat = seatService.getSeatById(seatId);
                        if (seat == null) {
                            model.addAttribute("error", "Seat not found");
                            return "boleto/demo/404";
                        }

                        // Cập nhật trạng thái ghế là "đã đặt"
                        seat.setIsOccupied(2);  // Đánh dấu ghế đã được đặt
                        seatService.updateSeatStatus(seat);  // Cập nhật trạng thái ghế trong DB

                        // Lấy giá ghế từ DB theo loại ghế (Silver, Gold, Platinum)
                        BigDecimal seatPrice = seatService.getPriceBySeatType(seat.getSeatType().getSeatName());
                        totalAmount = totalAmount.add(seatPrice);  // Cộng dồn giá của ghế vào tổng tiền

                        selectedSeats.add(seat);
                    }

                    // Tạo BookingDTO
                    BookingDTO booking = new BookingDTO();
                    booking.setTotalFoodTicketAmount(totalAmount);
                    booking.setBookingFee(bookingFee);
                    booking.setStatus("Pending");
                    booking.setCreatedDateTime(LocalDateTime.now());  // Sử dụng LocalDateTime để ghi lại thời gian tạo booking

                    // Liên kết Booking với Seat
                    SeatBookingDTO seatBooking = new SeatBookingDTO();
                    seatBooking.setBooking(booking);
                    seatBookingService.saveSeatBooking(seatBooking); // Lưu SeatBooking vào DB

                    // Lấy thông tin suất chiếu từ showtimeId
                    ShowtimeDTO showtime = showtimeService.getShowtimeById(showtimeId);

                    // Tạo vé (TicketDTO)
                    TicketDTO ticket = new TicketDTO();
                    ticket.setSeat(seatService.getSeatById(seatIds.get(0)));  // Chọn ghế đầu tiên làm đại diện
                    ticket.setShowtime(showtime);
                    ticket.setPrice(totalAmount);
                    ticket.setStatus("Not Used");

                    // Lưu vé vào DB
                    ticketService.saveTicket(ticket);

                    // Trả về thông tin vé và ghế đã chọn vào model
                    model.addAttribute("ticket", ticket);
                    model.addAttribute("selectedSeats", selectedSeats);
                    model.addAttribute("totalAmount", totalAmount);

                    return "boleto/demo/movie-checkout";  // Trả về trang hiển thị thông tin ghế đã chọn và tổng tiền
                }

                //    @PostMapping("/book-ticket")
                //    public String bookTicket(@RequestParam List<Integer> seatIds, // List of selected seat IDs
                //                             @RequestParam Integer movieId,
                //                             @RequestParam Integer showtimeId,
                //                             @RequestParam BigDecimal bookingFee,
                //                             HttpServletRequest request,
                //                             Model model) {
                //
                //        // Initialize Variables
                //        List<SeatDTO> selectedSeats = new ArrayList<>();
                //        BigDecimal totalAmount = BigDecimal.ZERO;
                //
                //        // Retrieve Movie and Showtime Information
                //        MovieDTO movie = movieService.getById(movieId);
                //        ShowtimeDTO showtime = showtimeService.getShowtimeById(showtimeId);
                //        if (movie == null || showtime == null) {
                //            model.addAttribute("error", "Invalid movie or showtime selected.");
                //            return "boleto/demo/404";
                //        }
                //
                //        // Validate and Process Each Selected Seat
                //        for (Integer seatId : seatIds) {
                //            SeatDTO seat = seatService.getSeatById(seatId);
                //            if (seat == null) {
                //                model.addAttribute("error", "Seat not found.");
                //                return "boleto/demo/404";
                //            }
                //
                //            if (seat.getIsOccupied() != 0) { // Check if Seat is Available
                //                model.addAttribute("error", "Seat " + seat.getSeatPosition() + " is no longer available.");
                //                return "boleto/demo/404";
                //            }
                //
                //            // Update Seat Status to "Held" (1)
                //            seat.setIsOccupied(1);
                //            seatService.updateSeatStatus(seat);
                //
                //            // Calculate Total Amount
                //            BigDecimal seatPrice = seatService.getPriceBySeatType(seat.getSeatType().getSeatName());
                //            totalAmount = totalAmount.add(seatPrice);
                //
                //            // Add to Selected Seats List
                //            selectedSeats.add(seat);
                //        }
                //
                //        // Create Booking Entity
                //        BookingDTO booking = new BookingDTO();
                //        booking.setTotalFoodTicketAmount(totalAmount);
                //        booking.setBookingFee(bookingFee);
                //        booking.setStatus("Pending");
                //        booking.setCreatedDateTime(LocalDateTime.now());
                //
                //        // Save Booking to Database
                //        bookingService.saveBooking(booking);
                //
                //        // Associate Seats with Booking
                //        for (SeatDTO seat : selectedSeats) {
                //            SeatBookingDTO seatBooking = new SeatBookingDTO();
                //            seatBooking.setBooking(booking);
                //            seatBooking.setSeat(seat); // Convert DTO to Entity
                //            seatBookingService.saveSeatBooking(seatBooking);
                //        }
                //
                //        // Create Tickets for Each Seat
                //        List<TicketDTO> tickets = new ArrayList<>();
                //        for (SeatDTO seat : selectedSeats) {
                //            TicketDTO ticket = new TicketDTO();
                //            ticket.setSeat(seat);
                //            ticket.setShowtime(showtime);
                //            ticket.setPrice(seatService.getPriceBySeatType(seat.getSeatType().getSeatName()));
                //            ticket.setStatus("Not Used");
                //            // Optionally, generate and set QR code URL
                //            // ticket.setQrImageURL(generateQrCodeUrl(ticket));
                //            ticketService.saveTicket(ticket);
                //            tickets.add(ticket);
                //        }
                //
                //        // Add Attributes to Model for Checkout Page
                //        model.addAttribute("movie", movie);
                //        model.addAttribute("showtime", showtime);
                //        model.addAttribute("selectedSeats", selectedSeats);
                //        model.addAttribute("totalAmount", totalAmount);
                //        model.addAttribute("booking", booking);
                //        model.addAttribute("tickets", tickets);
                //        model.addAttribute("bookingFee", bookingFee);
                //
                //        // Navigate to Checkout Page
                //        return "boleto/demo/movie-checkout";
                //    }



                ==================

                <!--    <script>-->
                <!--        // Biến toàn cục để lưu trữ ghế đã chọn và tổng giá-->
                <!--        let selectedSeats = [];-->
                <!--        let totalPrice = 0;-->

                <!--        // Hàm để chọn ghế-->
                <!--        function selectSeat(event) {-->
                <!--            const seatElement = event.currentTarget;-->
                <!--            const seatId = seatElement.getAttribute('data-seat-id');-->
                <!--            const seatPrice = parseFloat(seatElement.getAttribute('data-seat-price'));-->
                <!--            let isOccupied = parseInt(seatElement.getAttribute('data-seat-occupied'));-->

                <!--            // Kiểm tra trạng thái ghế-->
                <!--            if (isOccupied === 0) {-->
                <!--                // Ghế chưa được đặt, chuyển sang trạng thái giữ chỗ-->
                <!--                seatElement.setAttribute('data-seat-occupied', 1); // Cập nhật trạng thái-->
                <!--                seatElement.querySelector('img').src = 'assets/images/movie/seat01-booked.png'; // Cập nhật ảnh-->

                <!--                // Thêm ghế vào danh sách đã chọn-->
                <!--                selectedSeats.push({ id: seatId, position: seatElement.querySelector('.sit-num').innerText, price: seatPrice });-->
                <!--                totalPrice += seatPrice; // Cập nhật tổng giá-->

                <!--                // Gửi yêu cầu cập nhật trạng thái ghế tới backend-->
                <!--                updateSeatStatus(seatId, 1);-->
                <!--            } else if (isOccupied === 1) {-->
                <!--                // Ghế đang giữ chỗ, chuyển lại thành chưa đặt-->
                <!--                seatElement.setAttribute('data-seat-occupied', 0); // Cập nhật trạng thái-->
                <!--                seatElement.querySelector('img').src = 'assets/images/movie/seat01-free.png'; // Cập nhật ảnh-->

                <!--                // Xóa ghế khỏi danh sách đã chọn-->
                <!--                selectedSeats = selectedSeats.filter(seat => seat.id !== seatId);-->
                <!--                totalPrice -= seatPrice; // Cập nhật tổng giá-->

                <!--                // Gửi yêu cầu cập nhật trạng thái ghế tới backend-->
                <!--                updateSeatStatus(seatId, 0);-->
                <!--            } else if (isOccupied === 2) {-->
                <!--                // Ghế đã được đặt, không làm gì cả-->
                <!--                alert("Ghế này đã được đặt và không thể thay đổi.");-->
                <!--            }-->

                <!--            // Cập nhật hiển thị vị trí ghế và tổng giá-->
                <!--            updateDisplay();-->
                <!--        }-->

                <!--        // Hàm để cập nhật hiển thị vị trí ghế và tổng giá-->
                <!--        function updateDisplay() {-->
                <!--            const selectedSeatsElement = document.getElementById('selected-seats');-->
                <!--            const totalPriceElement = document.getElementById('total-price');-->
                <!--            const selectedSeatInputsContainer = document.getElementById('selected-seat-inputs');-->
                <!--            const bookingFeeInput = document.getElementById('booking-fee');-->

                <!--            // Cập nhật thông tin ghế đã chọn-->
                <!--            if (selectedSeats.length > 0) {-->
                <!--                const seatPositions = selectedSeats.map(seat => seat.position).join(', ');-->
                <!--                selectedSeatsElement.innerText = seatPositions;-->
                <!--            } else {-->
                <!--                selectedSeatsElement.innerText = 'No seat selected';-->
                <!--            }-->

                <!--            // Cập nhật tổng giá-->
                <!--            totalPriceElement.innerText = `$${totalPrice.toFixed(2)}`;-->

                <!--            // Cập nhật giá trị phí đặt chỗ-->
                <!--            bookingFeeInput.value = totalPrice.toFixed(2);-->

                <!--            // Cập nhật các input ẩn cho các ghế đã chọn-->
                <!--            selectedSeatInputsContainer.innerHTML = ''; // Xóa các input trước đó-->
                <!--            selectedSeats.forEach(seat => {-->
                <!--                const input = document.createElement('input');-->
                <!--                input.type = 'hidden';-->
                <!--                input.name = 'seatIds'; // Đảm bảo backend nhận được List<Integer> seatIds-->
                <!--                input.value = seat.id;-->
                <!--                selectedSeatInputsContainer.appendChild(input);-->
                <!--            });-->
                <!--        }-->

                <!--        // Hàm gửi yêu cầu cập nhật trạng thái ghế tới backend-->
                <!--        function updateSeatStatus(seatId, status) {-->
                <!--            fetch(`/api/seats/update-status`, {-->
                <!--                method: 'POST',-->
                <!--                headers: {-->
                <!--                    'Content-Type': 'application/json',-->
                <!--                },-->
                <!--                body: JSON.stringify({-->
                <!--                    seatId: seatId,-->
                <!--                    isOccupied: status-->
                <!--                })-->
                <!--            })-->
                <!--                .then(response => response.json())-->
                <!--                .then(data => {-->
                <!--                    if (data.success) {-->
                <!--                        console.log('Seat status updated successfully');-->
                <!--                    } else {-->
                <!--                        alert('Failed to update seat status');-->
                <!--                    }-->
                <!--                })-->
                <!--                .catch(error => {-->
                <!--                    console.error('Error:', error);-->
                <!--                });-->
                <!--        }-->

                <!--        // Hàm tải lại trạng thái ghế từ backend khi trang được tải lại hoặc khi trạng thái ghế thay đổi-->
                <!--        function reloadSeats() {-->
                <!--            const showtimeId = document.getElementById('showtime-id').value; // Lấy showtimeId từ một input hoặc URL-->
                <!--            fetch(`/api/seats?showtimeId=${showtimeId}`)-->
                <!--                .then(response => response.json())-->
                <!--                .then(data => {-->
                <!--                    // Cập nhật lại giao diện ghế sau khi tải lại từ server-->
                <!--                    updateSeatLayout(data);-->
                <!--                })-->
                <!--                .catch(error => {-->
                <!--                    console.error('Error:', error);-->
                <!--                });-->
                <!--        }-->

                <!--        // Hàm cập nhật giao diện ghế khi nhận dữ liệu từ backend-->
                <!--        // Hàm cập nhật giao diện ghế sau khi tải lại từ server-->
                <!--        function updateSeatLayout(seatData) {-->
                <!--            const seatArea = document.querySelector('.seat-area');-->
                <!--            seatArea.innerHTML = ''; // Clear existing layout-->

                <!--            seatData.forEach(row => {-->
                <!--                const rowElement = document.createElement('li');-->
                <!--                rowElement.classList.add('seat-line');-->

                <!--                // Add row label-->
                <!--                const rowLabel = document.createElement('span');-->
                <!--                rowLabel.innerText = row.key;-->
                <!--                rowElement.appendChild(rowLabel);-->

                <!--                const seatList = document.createElement('ul');-->
                <!--                seatList.classList.add('seat&#45;&#45;area');-->

                <!--                row.value.forEach(seat => {-->
                <!--                    const seatElement = document.createElement('li');-->
                <!--                    seatElement.classList.add('single-seat');-->
                <!--                    seatElement.classList.add(seatTypes[row.key]); // Adding the appropriate seat class-->

                <!--                    // Set seat attributes-->
                <!--                    seatElement.setAttribute('data-seat-id', seat.seatId);-->
                <!--                    seatElement.setAttribute('data-seat-price', seat.seatType.seatPrice);-->
                <!--                    seatElement.setAttribute('data-seat-position', seat.seatPosition);-->
                <!--                    seatElement.setAttribute('data-seat-occupied', seat.isOccupied);-->

                <!--                    // Set the seat image based on the occupancy status-->
                <!--                    let seatImage = '';-->
                <!--                    if (seat.isOccupied === 1) {-->
                <!--                        seatImage = 'seat01-booked.png';-->
                <!--                    } else if (seat.isOccupied === 0) {-->
                <!--                        seatImage = 'seat01-free.png';-->
                <!--                    } else if (seat.isOccupied === 2) {-->
                <!--                        seatImage = 'seat01-unavailable.png';-->
                <!--                    }-->

                <!--                    const img = document.createElement('img');-->
                <!--                    img.src = `assets/images/movie/${seatImage}`;-->
                <!--                    img.alt = 'seat';-->
                <!--                    seatElement.appendChild(img);-->

                <!--                    // Seat position number-->
                <!--                    const seatPosition = document.createElement('span');-->
                <!--                    seatPosition.classList.add('sit-num');-->
                <!--                    seatPosition.innerText = seat.seatPosition;-->
                <!--                    seatElement.appendChild(seatPosition);-->

                <!--                    // Append the seat element to the seat list-->
                <!--                    seatList.appendChild(seatElement);-->
                <!--                });-->

                <!--                rowElement.appendChild(seatList);-->
                <!--                seatArea.appendChild(rowElement);-->
                <!--            });-->
                <!--        }-->


                <!--        document.addEventListener('DOMContentLoaded', function() {-->
                <!--            reloadSeats();-->
                <!--        });-->


                <!--        /**-->
                <!--         * Form Submission Handling-->
                <!--         */-->
                <!--        document.getElementById('booking-form').addEventListener('submit', function(event) {-->
                <!--            // Prevent Default Form Submission if No Seats Selected-->
                <!--            if (selectedSeats.length === 0) {-->
                <!--                event.preventDefault();-->
                <!--                alert("Please select at least one seat to proceed.");-->
                <!--            }-->
                <!--            // Else, allow form to submit normally-->
                <!--        });-->
                <!--    </script>-->

                <!--    <script>-->
                <!--        // Hàm để chọn ghế-->
                <!--        // Biến toàn cục để lưu trữ ghế đã chọn và tổng giá-->
                <!--        let selectedSeats = [];-->
                <!--        let totalPrice = 0;-->

                <!--        // Hàm để chọn ghế-->
                <!--        function selectSeat(event) {-->
                <!--            const seatElement = event.currentTarget;-->
                <!--            const seatId = seatElement.getAttribute('data-seat-id');-->
                <!--            const seatPrice = parseFloat(seatElement.getAttribute('data-seat-price'));-->
                <!--            const isOccupied = parseInt(seatElement.getAttribute('data-seat-occupied'));-->

                <!--            // Kiểm tra trạng thái ghế-->
                <!--            if (isOccupied === 0) {-->
                <!--                // Ghế chưa được đặt, chuyển sang trạng thái giữ chỗ-->
                <!--                seatElement.setAttribute('data-seat-occupied', 1);-->
                <!--                seatElement.querySelector('img').src = 'assets/images/movie/seat01-booked.png'; // Cập nhật ảnh-->
                <!--                selectedSeats.push({ id: seatId, position: seatElement.querySelector('.sit-num').innerText, price: seatPrice }); // Thêm ghế vào danh sách đã chọn-->
                <!--                totalPrice += seatPrice; // Cập nhật tổng giá-->
                <!--            } else if (isOccupied === 1) {-->
                <!--                // Ghế đang giữ chỗ, chuyển lại thành chưa đặt-->
                <!--                seatElement.setAttribute('data-seat-occupied', 0);-->
                <!--                seatElement.querySelector('img').src = 'assets/images/movie/seat01-free.png'; // Cập nhật ảnh-->
                <!--                // Xóa ghế khỏi danh sách đã chọn-->
                <!--                selectedSeats = selectedSeats.filter(seat => seat.id !== seatId);-->
                <!--                totalPrice -= seatPrice; // Cập nhật tổng giá-->
                <!--            } else if (isOccupied === 2) {-->
                <!--                // Ghế đã được đặt, không làm gì cả-->
                <!--                alert("Ghế này đã được đặt và không thể thay đổi.");-->
                <!--            }-->

                <!--            // Cập nhật hiển thị vị trí ghế và tổng giá-->
                <!--            updateDisplay();-->
                <!--        }-->

                <!--        // Hàm để cập nhật hiển thị vị trí ghế và tổng giá-->
                <!--        function updateDisplay() {-->
                <!--            const selectedSeatsElement = document.getElementById('selected-seats');-->
                <!--            const totalPriceElement = document.getElementById('total-price');-->
                <!--            const selectedSeatInputsContainer = document.getElementById('selected-seat-inputs');-->
                <!--            const bookingFeeInput = document.getElementById('booking-fee');-->

                <!--            // Update Selected Seats Text-->
                <!--            if (selectedSeats.length > 0) {-->
                <!--                const seatPositions = selectedSeats.map(seat => seat.position).join(', ');-->
                <!--                selectedSeatsElement.innerText = seatPositions;-->
                <!--            } else {-->
                <!--                selectedSeatsElement.innerText = 'No seat selected';-->
                <!--            }-->

                <!--            // Update Total Price Text-->
                <!--            totalPriceElement.innerText = `$${totalPrice.toFixed(2)}`;-->

                <!--            // Update Booking Fee Hidden Input-->
                <!--            bookingFeeInput.value = totalPrice.toFixed(2);-->

                <!--            // Update Hidden Inputs for Selected Seats-->
                <!--            selectedSeatInputsContainer.innerHTML = ''; // Clear previous inputs-->
                <!--            selectedSeats.forEach(seat => {-->
                <!--                const input = document.createElement('input');-->
                <!--                input.type = 'hidden';-->
                <!--                input.name = 'seatIds'; // Ensure backend expects List<Integer> seatIds-->
                <!--                input.value = seat.id;-->
                <!--                selectedSeatInputsContainer.appendChild(input);-->
                <!--            });-->
                <!--        }-->

                <!--        /**-->
                <!--         * Form Submission Handling-->
                <!--         */-->
                <!--        document.getElementById('booking-form').addEventListener('submit', function(event) {-->
                <!--            // Prevent Default Form Submission if No Seats Selected-->
                <!--            if (selectedSeats.length === 0) {-->
                <!--                event.preventDefault();-->
                <!--                alert("Please select at least one seat to proceed.");-->
                <!--            }-->
                <!--            // Else, allow form to submit normally-->
                <!--        });-->
                <!--    </script>-->